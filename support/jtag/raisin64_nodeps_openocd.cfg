################################################################################
# JTAG Adapter Setup
#
# A simple OpenOCD script that uses the debug IRScan and DRScan instructions
# to support programming and basic debug of the raisin64 processor
################################################################################

#Configure Busblaster JTAG Interface
interface ftdi
ftdi_device_desc "BUSBLASTERv3c"
ftdi_vid_pid 0x0403 0x7780

ftdi_layout_init 0x0c08 0x0f1b
ftdi_layout_signal nTRST -data 0x0100 -noe 0x0400
ftdi_layout_signal nSRST -data 0x0200 -noe 0x0800

transport select jtag
adapter_khz 100

#Setup the expected ID for our chip
jtag newtap raisin64 cpu -irlen 4 -ircapture 0x1 -expected-id 0x1cafe06b -ignore-version

################################################################################
# Constants
################################################################################

#Setup our Debug Controller opcodes
set CPU_HALT_OP      0x01
set CPU_RESUME_OP    0x02
set CPU_RESET_OP     0x03
set CPU_READIMEM_OP  0x04
set CPU_WRITEIMEM_OP 0x05
set CPU_READDMEM_OP  0x06
set CPU_WRITEDMEM_OP 0x07
set CPU_IADDR_REG    0x80
set CPU_IDATA_REG    0x81
set CPU_DADDR_REG    0x82
set CPU_DDATA_REG    0x83

################################################################################
# Public functions
################################################################################

#Halts the CPU
proc raisin64_halt {} {
    globalpat CPU_*

    #Halt the CPU
    echo -n "Halting CPU..."
    raisin64_setOpReg $CPU_HALT_OP
    echo DONE
}

#Un-halts the CPU
proc raisin64_resume {} {
    globalpat CPU_*

    #Resume the CPU
    echo -n "Unhalting CPU..."
    raisin64_setOpReg $CPU_RESUME_OP
    echo DONE
}

#Resets and releases the CPU (also un-halts if halted)
proc raisin64_reset {} {
    globalpat CPU_*

    #Reset CPU
    echo -n "Resetting CPU..."
    raisin64_setOpReg $CPU_RESET_OP
    echo DONE
}

#Programs the Instruction and Data memory (optional) with "progmem pathToImemHex [pathToDmemHex]"
proc raisin64_program {imemPath {dmemPath ""} } {
    globalpat CPU_*

    raisin64_halt

    echo -n "Programming Instruction Memory..."
    raisin64_program_imem $imemPath
    echo DONE

    if {$dmemPath != ""} {
        echo -n "Programming Data Memory..."
        raisin64_program_dmem $dmemPath
        echo DONE
    }

    raisin64_reset
}

proc raisin64_program_srec {srecPath} {
    globalpat CPU_*

    raisin64_halt

    echo -n "Programming from SREC file..."

    set fd [open $srecPath "r"]
    fconfigure $fd -buffering line -translation auto

    while {[gets $fd line] > 0} {
        foreach {type addr data} [srec_decode_line $line] break
        #Inspired by the TCL wiki
        switch -exact -- $type {
            S0 { echo $data }
            S3 {
                set curChar 0
                set addr [expr {$addr}]
                set addrEnd [expr {$addr + [string length $data] - 1}]
                binary scan $data H* data
                while { $addr < $addrEnd} {
                    raisin64_write_single_imem $addr 0x[string range $data [expr {0+(8*$curChar)}] [expr {7+(8*$curChar)}] ]
                    incr addr 4
                    incr curChar
                }
            }
        }
    }
    close $fd

    raisin64_reset
}

#Dumps len words of data memory starting at hexAddr
proc raisin64_dump_dmem {hexAddr len} {
    globalpat CPU_*

    set baseAddr 0x0 
    for {set i 0x0} {$i < $len} {hexIncr i} {
        raisin64_setValueReg 0x$hexAddr
        raisin64_setOpReg $CPU_DADDR_REG
        raisin64_setOpReg $CPU_READDMEM_OP
    set tmp [raisin64_setValueReg 0x0]
    echo "RD $hexAddr : 0x$tmp"

    hexIncr hexAddr 8
    }
}

#Dumps len words of instruction memory starting at hexAddr
proc raisin64_dump_imem {hexAddr len} {
    globalpat CPU_*

    set baseAddr 0x0 
    for {set i 0x0} {$i < $len} {hexIncr i} {
        raisin64_setValueReg 0x$hexAddr
        raisin64_setOpReg $CPU_IADDR_REG
        raisin64_setOpReg $CPU_READIMEM_OP
    set tmp [raisin64_setValueReg 0x0]
    echo "RI $hexAddr : 0x$tmp"

    hexIncr hexAddr 8
    }
}

################################################################################
# Some internal functions to make the public functions work
################################################################################

proc raisin64_program_dmem {filePath} {
    globalpat CPU_*

    raisin64_program_mem_impl $filePath "dmem"
}

proc raisin64_program_imem {filePath} {
    globalpat CPU_*

    raisin64_program_mem_impl $filePath "imem"
}

proc raisin64_program_mem_impl {filePath memType} {
    globalpat CPU_*

    #Open the "hex" ASCII file and read in the contents
    set fd [open $filePath "r"]
    set lines [split [read $fd] "\n"]
    close $fd

    #For every line in our ASCII hex file
    set baseAddr 0x0 
    foreach line [lsearch -all -inline -regexp $lines {[1234567890abcdefABCDEF]{8}}] {
        #Write $line at $baseAddr into mem
        if {$memType == "dmem"} {raisin64_write_single_dmem $baseAddr 0x$line}
        if {$memType == "imem"} {raisin64_write_single_imem $baseAddr 0x$line}

        hexIncr baseAddr 8
    }
}

#Writes data $data to address $addr in dmem
proc raisin64_write_single_dmem {addr data} {
    globalpat CPU_*

    #puts "WD $addr : $data"

    #Set the current address
    raisin64_setValueReg $addr
    raisin64_setOpReg $CPU_DADDR_REG

    #Set the current data
    raisin64_setValueReg $data
    raisin64_setOpReg $CPU_DDATA_REG

    #Write to dmem the data $data to address $addr
    raisin64_setOpReg $CPU_WRITEDMEM_OP
}

#Writes data $data to address $addr in imem
proc raisin64_write_single_imem {addr data} {
    globalpat CPU_*

    #puts "WI 0x[format %08X $addr] : $data"

    #Set the current address
    raisin64_setValueReg $addr
    raisin64_setOpReg $CPU_IADDR_REG

    #Set the current data
    raisin64_setValueReg $data
    raisin64_setOpReg $CPU_IDATA_REG

    #Write to imem the data $data to address $addr
    raisin64_setOpReg $CPU_WRITEIMEM_OP
}

#Places $val into the JTAG TAP's USER_OP register
proc raisin64_setOpReg {val} {
    irscan raisin64.cpu 0x9
    drscan raisin64.cpu 8 $val
}

#Places $val into the JTAG TAP's USER_DATA register
proc raisin64_setValueReg {val} {
    irscan raisin64.cpu 0x8
    drscan raisin64.cpu 64 $val
}

################################################################################
# Utility functions
################################################################################

#A vomitous function to pull in the global constants we have defined en masse
proc globalpat {args} {
    foreach pattern $args {
        set varnames [info globals $pattern]
        if {[llength $varnames] != 0} {
            uplevel 1 global $varnames
        }
    }
}

#Hex increment proc
proc hexIncr {varName {delta 1}} { 
    upvar 1 $varName var  
    set var 0x[format %X [expr [scan $var %x]+$delta]]
}

#SREC parsers from the TCL wiki (with a few fixes):
# s-record checksum (2-complement 8 bit sum)
proc srec_cksum {data {seed 0}} {
    set t $seed
    binary scan $data c* bytes
    foreach byte $bytes { incr t [expr {$byte & 0xff}] }
    return [expr {(~$t) & 0xff}]
}
 
# decode one s-record. Returns a list of type, address, binary data
proc srec_decode_line {line} {
    set type [string range $line 0 1]
    switch -exact -- $type {
        S0 {set addrlen 4}
        S1 {set addrlen 4}
        S2 {set addrlen 6}
        S3 {set addrlen 8}
        S5 {set addrlen 4}
        S7 {set addrlen 8}
        S8 {set addrlen 6}
        S9 {set addrlen 4}
        default {
            return -code error "invalid data format: \"$type\" invalid type"
        }
    }
    if {[scan [string range $line 2 3] %02x count] != 1} {
        return -code error "invalid data format: count field incorrect"
    }
    if {[scan [string range $line 4 end] %0${addrlen}x addr] != 1} {
        return -code error "invalid data format: address field incorrect"
    }
    if {[scan [string range $line end-1 end] %02x cksum] != 1} {
        return -code error "invalid data format: checksum field incorrect"
    }
    set data [binary format H* [string range $line 2 end-2]]
    if {$count != [expr [string length $data]-1]} {
        return -code error "invalid data format: line count incorrect"
    }
    if {[srec_cksum $data] != $cksum} {
        return -code error "invalid checksum: data corruption detected"
    }

    return [list $type $addr [string range $data [expr {$addrlen/2 + 1}] end]]
}
